/*
 * This file is generated by jOOQ.
 */
package co.markwilkins.mythology.database.tables;


import co.markwilkins.mythology.database.Indexes;
import co.markwilkins.mythology.database.Keys;
import co.markwilkins.mythology.database.Myth;
import co.markwilkins.mythology.database.tables.records.CharactersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Characters extends TableImpl<CharactersRecord> {

    private static final long serialVersionUID = 1120910770;

    /**
     * The reference instance of <code>myth.characters</code>
     */
    public static final Characters CHARACTERS = new Characters();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CharactersRecord> getRecordType() {
        return CharactersRecord.class;
    }

    /**
     * The column <code>myth.characters.id</code>.
     */
    public final TableField<CharactersRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>myth.characters.name</code>.
     */
    public final TableField<CharactersRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>myth.characters.race_id</code>.
     */
    public final TableField<CharactersRecord, Integer> RACE_ID = createField("race_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>myth.characters.home_location_id</code>.
     */
    public final TableField<CharactersRecord, Integer> HOME_LOCATION_ID = createField("home_location_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>myth.characters</code> table reference
     */
    public Characters() {
        this(DSL.name("characters"), null);
    }

    /**
     * Create an aliased <code>myth.characters</code> table reference
     */
    public Characters(String alias) {
        this(DSL.name(alias), CHARACTERS);
    }

    /**
     * Create an aliased <code>myth.characters</code> table reference
     */
    public Characters(Name alias) {
        this(alias, CHARACTERS);
    }

    private Characters(Name alias, Table<CharactersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Characters(Name alias, Table<CharactersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Characters(Table<O> child, ForeignKey<O, CharactersRecord> key) {
        super(child, key, CHARACTERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Myth.MYTH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CHARACTERS_HOME_LOCATION_ID, Indexes.CHARACTERS_PRIMARY, Indexes.CHARACTERS_RACE_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CharactersRecord> getPrimaryKey() {
        return Keys.KEY_CHARACTERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CharactersRecord>> getKeys() {
        return Arrays.<UniqueKey<CharactersRecord>>asList(Keys.KEY_CHARACTERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CharactersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CharactersRecord, ?>>asList(Keys.CHARACTERS_IBFK_1, Keys.CHARACTERS_IBFK_2);
    }

    public Races races() {
        return new Races(this, Keys.CHARACTERS_IBFK_1);
    }

    public Locations locations() {
        return new Locations(this, Keys.CHARACTERS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Characters as(String alias) {
        return new Characters(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Characters as(Name alias) {
        return new Characters(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Characters rename(String name) {
        return new Characters(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Characters rename(Name name) {
        return new Characters(name, null);
    }
}
