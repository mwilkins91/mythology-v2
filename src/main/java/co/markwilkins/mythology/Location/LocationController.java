package co.markwilkins.mythology.Location;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@RestController
public class LocationController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private LocationRepository locationRepository;

    @RequestMapping(value="/locations", method = RequestMethod.GET, produces="application/json")
    @ResponseBody
    public ResponseEntity<Iterable> getAllLocations(@RequestParam(value="page", defaultValue = "0", required = true) int page) {

        Iterable res = locationRepository.findAll(new PageRequest(page, 20));
        return new ResponseEntity<Iterable>(res, HttpStatus.OK);
    }

    @RequestMapping(value="/location", method = RequestMethod.GET, produces="application/json")
    @ResponseBody
    public ResponseEntity<Location> getLocation(@RequestParam(value="name", required=true) String name) {

        Location res = locationRepository.findFirstByName(name);

        if (res == null) return new ResponseEntity<>(HttpStatus.NOT_FOUND);

        return new ResponseEntity<>(res, HttpStatus.OK);
    }

    @RequestMapping(value="/location", method = RequestMethod.POST, produces="application/json")
    @ResponseBody
    public ResponseEntity<?> addNewLocation (@Valid @RequestBody LocationRequestBody body) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        String name = body.getName();

        Location location = new Location();
        location.setName(name);
        locationRepository.save(location);
        return new ResponseEntity(location, HttpStatus.CREATED);
    }

}